#!/usr/bin/env python3
"""
selective_ddg_slicer.py - orchestrate DDG slices for top-k functions
Usage:
  python3 selective_ddg_slicer.py --adv-csv adv.csv --target /path/to/target --slicer scripts/slice_provenance.py --out-dir adv_slices --top-k 3 --control-only-for-rest
"""
import argparse, csv, os, subprocess, sys

def load_rows(csv_path):
    rows = []
    with open(csv_path, newline='', encoding='utf-8') as fh:
        rdr = csv.DictReader(fh)
        for r in rdr:
            rows.append(r)
    return rows

def group_by_file(rows):
    grouping = {}
    for r in rows:
        f = r.get("file") or r.get("filename") or r.get("path") or ""
        if not f: continue
        grouping.setdefault(f, []).append(r)
    return grouping

def run_slicer(py_exec, slicer, target, func_addr, out_dot, out_png, use_ddg):
    cmd = [py_exec, slicer, target, "--func", func_addr, "--out", out_dot, "--png", out_png]
    if use_ddg:
        cmd += ["--use-ddg", "--keep-state", "--state-refs"]
    else:
        cmd += ["--control-only"]
    print("[*] running slicer:", " ".join(cmd))
    p = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    if p.stdout: print(p.stdout)
    if p.stderr: print(p.stderr)
    return p.returncode

def main():
    parser = argparse.ArgumentParser(description="Selective DDG slicer (top-k)")
    parser.add_argument("--adv-csv", required=True, help="Advanced CSV generated by advanced detector")
    parser.add_argument("--target", required=True, help="Target binary path used to generate adv CSV")
    parser.add_argument("--slicer", default="scripts/slice_provenance.py", help="Path to slicer script")
    parser.add_argument("--out-dir", default="adv_slices", help="Output directory for slice artifacts")
    parser.add_argument("--top-k", type=int, default=3, help="Run DDG slice for top-k functions per candidate (by order/confidence)")
    parser.add_argument("--control-only-for-rest", action="store_true", help="Run control-only slice for functions not in top-k")
    args = parser.parse_args()

    os.makedirs(args.out_dir, exist_ok=True)
    rows = load_rows(args.adv_csv)
    grouped = group_by_file(rows)
    py_exec = sys.executable

    for f, items in grouped.items():
        try:
            items_sorted = sorted(items, key=lambda r: float(r.get("confidence") or 0.0), reverse=True)
        except Exception:
            items_sorted = items
        for i, row in enumerate(items_sorted):
            func = row.get("func_addr") or row.get("function_addr") or row.get("func") or row.get("funcaddr")
            if not func: continue
            if isinstance(func, str) and not func.startswith("0x"):
                try:
                    func = hex(int(func))
                except Exception:
                    pass
            use_ddg = (i < args.top_k)
            out_prefix = os.path.join(args.out_dir, f"{os.path.basename(f)}_0x{int(func, 16):x}")
            dot = out_prefix + "_slice.dot"
            png = out_prefix + "_slice.png"
            if not os.path.exists(dot) or not os.path.exists(png):
                rc = run_slicer(py_exec, args.slicer, args.target, func, dot, png, use_ddg)
                print("[*] slicer return code:", rc)
            else:
                print("[*] already exists:", dot, png)

if __name__ == "__main__":
    main()
